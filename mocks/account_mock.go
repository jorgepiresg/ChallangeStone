// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model_account "github.com/jorgepiresg/ChallangeStone/model/account"
)

// MockIAccount is a mock of IAccount interface.
type MockIAccount struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountMockRecorder
}

// MockIAccountMockRecorder is the mock recorder for MockIAccount.
type MockIAccountMockRecorder struct {
	mock *MockIAccount
}

// NewMockIAccount creates a new mock instance.
func NewMockIAccount(ctrl *gomock.Controller) *MockIAccount {
	mock := &MockIAccount{ctrl: ctrl}
	mock.recorder = &MockIAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccount) EXPECT() *MockIAccountMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIAccount) Create(ctx context.Context, account model_account.Create) (model_account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, account)
	ret0, _ := ret[0].(model_account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIAccountMockRecorder) Create(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccount)(nil).Create), ctx, account)
}

// Get mocks base method.
func (m *MockIAccount) Get(ctx context.Context) ([]model_account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]model_account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIAccountMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIAccount)(nil).Get), ctx)
}

// GetByCPF mocks base method.
func (m *MockIAccount) GetByCPF(ctx context.Context, cpf string) (model_account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCPF", ctx, cpf)
	ret0, _ := ret[0].(model_account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCPF indicates an expected call of GetByCPF.
func (mr *MockIAccountMockRecorder) GetByCPF(ctx, cpf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCPF", reflect.TypeOf((*MockIAccount)(nil).GetByCPF), ctx, cpf)
}

// GetByID mocks base method.
func (m *MockIAccount) GetByID(ctx context.Context, ID string) (model_account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(model_account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIAccountMockRecorder) GetByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIAccount)(nil).GetByID), ctx, ID)
}

// UpdateBalance mocks base method.
func (m *MockIAccount) UpdateBalance(ctx context.Context, ID string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, ID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockIAccountMockRecorder) UpdateBalance(ctx, ID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockIAccount)(nil).UpdateBalance), ctx, ID, amount)
}
